
#include <msp430g2553.h>

#define LED1 BIT0
#define LED2 BIT6
#define BUTTON BIT3

unsigned int folds = 1;
int i=1;

void main(void)
{
WDTCTL = WDTPW + WDTHOLD; 	//Stop watchdog timer

P1OUT  = 0x00;			//make sure all default outputs are zero
P1DIR  = 0x00;			//make all port pins inputs by default
P1DIR  = (LED1 | LED2); 	//set P1.0 and P1.6 to output direction

P1REN |= BUTTON; 		//enables resistor on the button pin
P1OUT |= BUTTON; 		//make that a pull up
P1IES |= BUTTON; 		//interrupt edge select, hi to lo
P1IE  |= BUTTON; 		//enable interrupt on selected pin
__enable_interrupt(); 		//enable interrupts in general

for (;;)
{
   P1OUT ^= (LED2); 	        //toggle LED2 using XOR
   for(i = 1; i <= folds; i++)  //for folds number of times
     {__delay_cycles(100000);}  //run delay of 100,000 micro seconds
}
}
//end main


// Port 1 interrupt routine
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
   P1OUT |= LED1;		//LED1 on at start of interrupt service
   
   folds ++; 			//increment folds
   if (folds >= 4) {folds =1;}  //cycle folds for 1,2,3
   __delay_cycles(100000);	//allow some delay to see LED1
   
   P1IFG &= ~BUTTON;  		//P1.3 IFG cleared
   __delay_cycles(20000);	//allow some delay for switch debounce
   
   P1OUT &= ~LED1;		//LED1 off to indicate end of interrupt
}
//end port 1 interrupt