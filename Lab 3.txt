Lab2		mov.w 	#7, R4		;set up the initial a value in R4
			clr.w	R5
			clr.w	R6
			clr.w	R7
			clr.w	R8

Xcalc		mov.w	R4, R5		;copy the a value into R5
			call 	#ABSOL		;computer the absolute value of a in R5

Summation	mov.w 	R5, R6		;starting the upper limit with value a of the summation in R6
			call 	#FACTO		;get the factorial value of R6 and save in R6
			add.w	R6, R6		;multiply the factorial value by 2
			add.w	R6, R8		;add the value to the accumulator
			dec.w 	R5			;get the next a-1 value
			jn 		Summend
			jmp		Summation
Summend		mov.w 	R8, R5		;save the summation results in R5

Fcalc		mov.w 	R5, R7		;start F calculation
			add 	#50, R7
			clrc				;clear carry bit
			rrc		R7			;shift 1 bit to the right to devide by 2
			clrc
			rrc		R7

loop		jmp 	loop		;loop in place



;Absolute subroutine take a value form R5 and converts it to its absolute value
ABSOL:
			tst 	R5
			jn		twoscompl
			ret
twoscompl	inv 	R5
			inc		R5
ABSOLend	ret



;Factorial subroutine takes number n form R6 and compute/save n! in R6
;You need to replace the NOP with your actual n! calculation as given in class
;You must push/pop all registers
FACTO:
			push	R5			;save the contents of R5 as we will use it in the subroutine as a scratch pad
			tst 	R6			;test the n value in R6 if it is zero or negative to set default values
			jz		zero
			jn 		neg
			mov.w	R6, R5		;R5 and R6 have the n value
faloop		dec.w	R5			;n-1
			jz		done
			call	#MULT		;multiplies R5 to R6
			jmp		faloop

zero		mov.w	#1, R6
			jmp		done
neg			mov		#0, R6
done		pop		R5
FACTOend	ret



;The multiplier subroutine based on shift and add
;It takes R5 as the multiplier and R6 as the multiplicand
;to avoid multiplication overflow, both R5 and R6 should be limited to one byte and thus ANDed with 0X00FF.
;but due to factorial calculation, we will not mask R6 to let it grow beyond 255
MULT:
			push.w	R5;
			push.w	R7;
			push.w 	R8;
			mov.w	#8, R8		;8 bit multiplication, so we loop 8 times
			clr.w	R7			;additive accumulator should start with zero
			and.w	#0x00FF, R5	;clear upper 8 bits of multiplier
			;and.w 	#0x00FF, R6	;clear upper 8 bits of multiplicand

nextbit		rrc.w	R5			;shift multiplier bits one at a time to the carry
			jnc		twice		;if no carry skip the add
addmore		add.w	R6, R7		;add a copy of the multiplicand to the accumulator
twice		add.w	R6, R6		;multiplicand times 2, (shifted 1 bit left)
			dec.w 	R8			;dec loop counter
			jnz		nextbit		;jump to check next bit of the multiplier
			mov.w 	R7, R6		;save the result in R6

			pop.w	R8;
			pop.w	R7;
			pop.w 	R5;

MULTend		ret